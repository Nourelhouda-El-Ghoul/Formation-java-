
*****************************Java For Testers*************************



1/class--> Collection of variables and methods
2/main() --> method can be present in the same class
        --> method can be present in separate class 


Data Types in java 

1/Primitive data type : int /double/char/boolean/float....
2/Derived data type : String/Array/ArrayList....


int x = 10;
float x=10.5;
double x= 10.5555555;
char x = 'y';
String s = "welcome";


int x
int y  
--> int x,y

---> Declaration 

x=10 --> initialization 



Operators in Java 

10+20 ---> + operator 
-
*
% MODULO 
 + --> operator

**//Relational operators --> == <> <= >= !=
--> always return boolean 

**//Logical operators -->&& || !

**//Increment /Decrement  operations  ++/ --


**// Conditional Statement 
Loops/Iterative Statement/Jump Statement 


*********************************************
************************************************

//**Part1//**

OOP ---> Object Oriented Programming


Object --> is an instance of class 
Method -->  Block of code which contains logic


/* Class Variable */

We can assign values to variable in 3 ways  //int x=10

1/ By using reference variable 
2/ By using method
3/ By using constructor 


//** Constuctor **//

Type of constuctor : 

1/ Default constructor 
2/ Parametrized Constructor 



/* A special type of method 
/* used for initializing the class variable 
/* Name should be same as class name 
/* will not return any value 
/*will be invoke at the time of creating object 


/* Method */ ---> Bloc of code 

1/ case 1 : not tacking parameters and also not return any value 
2/ case 2 : not tacking parameters but returning value 
3/ case 3 : taking parameters but not returning value 
4/ case 4 : taking parameters and also returning value 


/* Part2*/


***Overloading
***This Keyword
***Static variable and static method 


/****Overloading****/

In french : Surcharge 

***Creating methods/constructors with the same name with different parameters/different dataTypes

Advantages: 

***Save memory
**Save Time 

--> Applied on methods/Constructors( special type of method)


***This Keyword

Usage of Java This keyword

1/ This can be used to refer current class instance variable 
2/This can be used to invokecurrent class method
3/this() can be used to invoke current class constructor 
4/This can be passed as an argument in the constructor call
5/this can be used to return the current instance from method 



***Static variable and static method 

Static --> applied for variables and methods 

** static variable 
**static method 


1/static method can access only static stuff(directly) ---> without creating an object
2/static method can also access non static stuff but through object
3/non static method can access both static and non static stuff (method+variable)  directly TRUE


//**part3**/

**Java Inheritance 
**Method Overrinding 
**Super Keyword
**Final Keyword 


***********Java Inheritance


1/Single
2/Multilevel
3/Hierrarchical

4/Multiple 
5/Hybrid 


********Method Overrinding 

Re writing the method in child class 
1/ method definition(param+name) should be the same 
2/ Body should be different 


Overloading --> same name /different nbr of param /different data type 
Overrinding --> same name / same param/different body 

---> Polymorphisme


********Super Keyword

---> used in inheritance 

1--> super can be used to refer immediate parent class instance variable 
2--> super can be used to invoke immediate parent calss method 
3--> super() can be used to invoke immediate parent constructor 


*********Final Keyword 

Variable--> you can not change the value of the variable 
method --> you can not override in the child method 
class --> class can not be extend into another class 




4/Multiple 
5/Hybrid 


*****/Part4***/
---Java Interface
--Java Package
--Access Modifiers 



******Java Interface******

--An interface in java is a blueprint of class 
--Interface contains final and static variable ( by default)
--interface contains abstract method 


--> An abstract method is a method contains definition but not body 

-Method in interface are public by default 
-Interface supports the functionnality of multiple inheritance 
-We can define interface with the keyword interface 

-Class A extends  Class B / interface extends another interface / But A Class implements interface 
-- We can create reference for interface but we can not instantiate interface 



****Java Package*****


--Collection of classes/interfaces/files....



*******Access Modifiers *****


Access Modifier's = Define the scoop of variable and methods

Public 
Protected
Default
Private 


private : the private access modifier's is accessible only within class
default: if you don't use any modifier's it's treated default by default 
--> The default modifier's is accessible within package 
protected : the protected access modifier's is accessible within package 
and outside the package but through inheritance (extends) 
public : we can access evrywhere 


****Part 5*****

----Exception Handling 


Exception is an abnormal condition 
in , java, exception event that disturb the normal flow of the program 


Types of Exceptions : 

1/ Checked Exception: Identifyed by the compiler 

Example :
-InterruptedException
-IOException
-FileNotFoundException



2/ Unchecked Exception : wich are not checked exception / not identifyed by the compiler 


Example : 
-ArithmeticException
-NullPointerException
-NumberFormatException
-ArrayIndexOfBoundException


/**Part6**/

ArrayList
Hashmap
JDBC

ArrayList ==> we can store any number and type of elements 

int a[] = new int a[5] ==> simple array 
Limitation : 
--we can not store more than 5 elements 
--We can not store multiple type of elements 



Oprations in ArrayList : 

--How to declare array list
--how to add element /values to array list 
--Find size of array list 
--Read values from Array List
--Remove element from Array List 
--Insert a new element in the middle od the Array List 




*****HashMap

Operation: 
--Declare HashMap
--Remove element from HashMap
--Add element to the HashMap 
















